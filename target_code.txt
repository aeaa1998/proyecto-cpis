.data
	invalid_string: .asciiz "Los indices pasados son inválidos"
	objectName: .asciiz "Object"
	stringName: .asciiz "String"
	intName: .asciiz "Int"
	boolName: .asciiz "Bool"
	abortMessage: .asciiz "Interrupción por algún error"
	Object_vtable:
		.word Object_abort
		.word Object_type_name
	string0: .asciiz "Main"
	Main_vtable:
		.word Object_abort
		.word Object_type_name
		.word out_string
		.word out_int
		.word in_string
		.word in_int
		.word Main_ackermann
		.word Main_main
.text
main:
jal instantiate_new_Main
move $t9, $v0
sw $t9, -320($sp)
jal Main_main
li $v0, 10
syscall
#Declaring new function ackermann
Main_ackermann:
	subi $sp, $sp, 20
	# We are going to store the current state
	sw $t9, 0($sp)
	sw $t0, 4($sp)
	sw $t1, 8($sp)
	sw $t2, 12($sp)
	#Adding space for the parameters + body
	subi $sp, $sp, 300
	sw $ra, 296($sp)
	lw $t9, 0($sp)
	lw $t0, 4($sp)
	lw $t1, 12($sp)
	xor $t1, $t0, 0
	slti $t1, $t1, 1
	bne $t1, 0, TRUE_0
	j FALSE_0
	TRUE_0:
sw $t0, 4($sp)
sw $t1, 12($sp)
		lw $t2, 8($sp)
		sw $t0, 4($sp)
		lw $t0, 16($sp)
		addi $t0, $t2, 1
		sw $t2, 8($sp)
		lw $t2, 56($sp)
		sw $t0, 56($sp)
		move $t2, $t0
lw $t0, 4($sp)
lw $t1, 12($sp)
		j ENDIF_0
	FALSE_0:
sw $t0, 4($sp)
sw $t1, 12($sp)
		sw $t0, 4($sp)
		lw $t0, 8($sp)
		lw $t2, 20($sp)
		xor $t2, $t0, 0
		slti $t2, $t2, 1
		bne $t2, 0, TRUE_1
		j FALSE_1
		TRUE_1:
sw $t0, 8($sp)
sw $t2, 20($sp)
sw $t1, 12($sp)
			sw $t0, 8($sp)
			lw $t0, 4($sp)
			sw $t2, 20($sp)
			lw $t2, 24($sp)
			subi $t2, $t0, 1
			#We are going to send a heap
			sw $t9, -320($sp)
			#We are going to send a param with offset defined
			sw $t2, -316($sp)
			sw $t0, 4($sp)
			lw $t0, 28($sp)
			li $t0, 1
			sw $t0, 28($sp)
			#We are going to send a param with offset defined
			sw $t0, -312($sp)
			lw $s0, 4($t9)
			lw $s0, 24($s0)
			jalr $s0
			sw $t0, 28($sp)
			lw $t0, 32($sp)
			#Setting value for Main_ackermann
			move $t0, $v0
			sw $t2, 24($sp)
			lw $t2, 52($sp)
			sw $t0, 52($sp)
			move $t2, $t0
lw $t0, 8($sp)
lw $t2, 20($sp)
lw $t1, 12($sp)
			j ENDIF_1
		FALSE_1:
sw $t0, 8($sp)
sw $t2, 20($sp)
sw $t1, 12($sp)
			sw $t0, 8($sp)
			lw $t0, 4($sp)
			sw $t2, 20($sp)
			lw $t2, 36($sp)
			subi $t2, $t0, 1
			sw $t0, 4($sp)
			lw $t0, 8($sp)
			sw $t2, 36($sp)
			lw $t2, 40($sp)
			subi $t2, $t0, 1
			#We are going to send a heap
			sw $t9, -320($sp)
			sw $t0, 8($sp)
			lw $t0, 4($sp)
			#We are going to send a param with offset defined
			sw $t0, -316($sp)
			#We are going to send a param with offset defined
			sw $t2, -312($sp)
			lw $s0, 4($t9)
			lw $s0, 24($s0)
			jalr $s0
			sw $t0, 4($sp)
			lw $t0, 44($sp)
			#Setting value for Main_ackermann
			move $t0, $v0
			#We are going to send a heap
			sw $t9, -320($sp)
			sw $t0, 44($sp)
			lw $t0, 36($sp)
			#We are going to send a param with offset defined
			sw $t0, -316($sp)
			sw $t0, 36($sp)
			lw $t0, 44($sp)
			#We are going to send a param with offset defined
			sw $t0, -312($sp)
			lw $s0, 4($t9)
			lw $s0, 24($s0)
			jalr $s0
			sw $t0, 44($sp)
			lw $t0, 48($sp)
			#Setting value for Main_ackermann
			move $t0, $v0
			sw $t2, 40($sp)
			lw $t2, 52($sp)
			sw $t0, 52($sp)
			move $t2, $t0
		ENDIF_1:
		lw $t0, 8($sp)
		lw $t2, 20($sp)
		lw $t1, 12($sp)
		sw $t0, 8($sp)
		lw $t0, 52($sp)
		sw $t2, 20($sp)
		lw $t2, 56($sp)
		sw $t0, 56($sp)
		move $t2, $t0
	ENDIF_0:
	lw $t0, 4($sp)
	lw $t1, 12($sp)
	lw $ra, 296($sp)
	#We are going to assign the response
	#Finalizo la función ackermann
	sw $t0, 4($sp)
	lw $t0, 56($sp)
	move $v0, $t0
	#removing space for the parameters + body
	subi $sp, $sp, -300
	# We are going to restore the current state
	lw $t9, 0($sp)
	lw $t0, 4($sp)
	lw $t1, 8($sp)
	lw $t2, 12($sp)
	subi $sp, $sp, -20
	jr $ra
#Declaring new function main
Main_main:
	subi $sp, $sp, 20
	# We are going to store the current state
	sw $t9, 0($sp)
	sw $t0, 4($sp)
	sw $t1, 8($sp)
	sw $t2, 12($sp)
	#Adding space for the parameters + body
	subi $sp, $sp, 300
	sw $ra, 296($sp)
	lw $t9, 0($sp)
	#We are going to send a heap
	sw $t9, -320($sp)
	lw $t0, 8($t9)
	#We are going to send a param with offset defined
	sw $t0, -316($sp)
	lw $t1, 12($t9)
	#We are going to send a param with offset defined
	sw $t1, -312($sp)
	lw $s0, 4($t9)
	lw $s0, 24($s0)
	jalr $s0
	lw $t2, 4($sp)
	#Setting value for Main_ackermann
	move $t2, $v0
	#We are going to send a heap
	sw $t9, -20($sp)
	#We are going to send a param with offset defined
	sw $t2, -16($sp)
	lw $s0, 4($t9)
	lw $s0, 12($s0)
	jalr $s0
	sw $t0, 8($t9)
	lw $t0, 8($sp)
	#Setting value for out_int
	move $t0, $v0
	lw $ra, 296($sp)
	#We are going to assign the response
	#Finalizo la función main
	move $v0, $t0
	#removing space for the parameters + body
	subi $sp, $sp, -300
	# We are going to restore the current state
	lw $t9, 0($sp)
	lw $t0, 4($sp)
	lw $t1, 8($sp)
	lw $t2, 12($sp)
	subi $sp, $sp, -20
	jr $ra
#Defining new class Main
instantiate_new_Main:
	subi $sp, $sp, 20
	sw $ra, 0($sp)
	sw $t9, 4($sp)
	sw $t0, 8($sp)
	sw $t1, 12($sp)
	sw $t2, 16($sp)
	li $v0, 9
	li $a0, 20
	syscall
	move $t9, $v0
	la $v0, Main_vtable
	sw $v0, 4($t9)
	#Declaring property  m of class Int
	lw $t0, 8($t9)
	li $t0, 3
	sw $t0, 8($t9)
	#Declaring property  n of class Int
	lw $t1, 12($t9)
	li $t1, 2
	sw $t1, 12($t9)
	#Declaring name value
	li $a0, 4
	la $a1, string0
	jal copyString
	sw $v0,  0($t9)
	sw $t0, 8($t9)
	sw $t1, 12($t9)
	move $v0, $t9
	lw $ra, 0($sp)
	lw $t9, 4($sp)
	lw $t0, 8($sp)
	lw $t1, 12($sp)
	lw $t2, 16($sp)
	addi $sp, $sp, 20
	jr $ra
